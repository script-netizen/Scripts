-- Load external dependencies
local DrRayLibrary = loadstring(game:HttpGet("https://raw.githubusercontent.com/AZYsGithub/DrRay-UI-Library/main/DrRay.lua"))()

-- Services
local RunService = game:GetService("RunService")
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

-- Constants
local ENERGY_MAX = 101
local CHARGE_MAX = 100
local HITBOX_SIZE = Vector3.new(10, 10, 10)

-- Initialize UI
local window = DrRayLibrary:Load("DrRay!", "Default")
local mainTab = DrRayLibrary.newTab("Main", "ImageIdHere")
local generalTab = DrRayLibrary.newTab("General", "ImageIdHere")

-- State management
local State = {
    player = Players.LocalPlayer,
    character = nil,
    connections = {
        energy = nil,
        charge = nil,
        autoBlock = nil,
        characterAdded = nil,
        noCooldown = nil,
        hitboxUpdate = nil
    },
    toggleStates = {
        energy = false,
        charge = false,
        autoBlock = false,
        noCooldown = false,
        hitboxExpander = false
    },
    originalHitboxes = {}
}

-- Helper functions
local function stopConnection(connectionName)
    if State.connections[connectionName] then
        State.connections[connectionName]:Disconnect()
        State.connections[connectionName] = nil
    end
end

local function stopAllConnections()
    for name, _ in pairs(State.connections) do
        stopConnection(name)
    end
end

-- Reset hitboxes to original size
local function resetHitboxes()
    for player, size in pairs(State.originalHitboxes) do
        if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            player.Character.HumanoidRootPart.Size = size
        end
    end
    State.originalHitboxes = {}
end

-- Update hitboxes for all players except local player
local function updateHitboxes()
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= State.player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local rootPart = player.Character.HumanoidRootPart
            if not State.originalHitboxes[player] then
                State.originalHitboxes[player] = rootPart.Size
            end
            rootPart.Size = HITBOX_SIZE
            rootPart.Transparency = 0.4
        end
    end
end

-- No Cooldown hook function
local function setupNoCooldown()
    if State.toggleStates.noCooldown then
        spawn(function()
            local oldWait
            oldWait = hookfunction(wait, function(duration)
                if duration and duration ~= 0 and 
                   tostring(getcallingscript(oldWait)) ~= "nil" and 
                   tonumber(duration) < 2.5 and 
                   State.toggleStates.noCooldown then
                    return oldWait()
                end
                return oldWait(duration)
            end)
        end)
    end
end

local function setupCharacterConnections()
    if not State.character then return end
    
    -- Reconnect active toggles
    for toggle, isActive in pairs(State.toggleStates) do
        if isActive then
            if toggle == "energy" then
                State.connections.energy = RunService.Heartbeat:Connect(function()
                    if State.character:FindFirstChild("Energy") then
                        State.character.Energy.Value = ENERGY_MAX
                    end
                end)
            elseif toggle == "charge" then
                State.connections.charge = RunService.Heartbeat:Connect(function()
                    if State.character:FindFirstChild("Charge") then
                        State.character.Charge.Value = CHARGE_MAX
                    end
                end)
            elseif toggle == "autoBlock" then
                State.connections.autoBlock = RunService.Heartbeat:Connect(function()
                    spawn(function()
                        if State.character then
                            wait()
                            ReplicatedStorage.RemoteEvents.ReplicateGuardOn:FireServer()
                            State.character.Guarding.Value = false
                            wait()
                            ReplicatedStorage.RemoteEvents.ReplicateGuardOff:FireServer()
                        end
                    end)
                end)
            elseif toggle == "noCooldown" then
                setupNoCooldown()
            elseif toggle == "hitboxExpander" then
                updateHitboxes()
                -- Set up connection to handle new players
                State.connections.hitboxUpdate = RunService.Heartbeat:Connect(updateHitboxes)
            end
        end
    end
end

local function handleCharacterAdded(char)
    State.character = char
    setupCharacterConnections()
end

-- Initialize character tracking
State.connections.characterAdded = State.player.CharacterAdded:Connect(handleCharacterAdded)
State.character = State.player.Character or State.player.CharacterAdded:Wait()

-- Main Tab UI Elements
mainTab.newButton("Update", "Reconnect player values", function()
    stopAllConnections()
    handleCharacterAdded(State.player.Character)
end)

mainTab.newToggle("FEnergy", "Full Energy!", false, function(state)
    State.toggleStates.energy = state
    stopConnection("energy")
    
    if state then
        State.connections.energy = RunService.Heartbeat:Connect(function()
            if State.character and State.character:FindFirstChild("Energy") then
                State.character.Energy.Value = ENERGY_MAX
            end
        end)
    end
end)

mainTab.newToggle("Full Charge", "Full Charge!", false, function(state)
    State.toggleStates.charge = state
    stopConnection("charge")
    
    if state then
        State.connections.charge = RunService.Heartbeat:Connect(function()
            if State.character and State.character:FindFirstChild("Charge") then
                State.character.Charge.Value = CHARGE_MAX
            end
        end)
    end
end)

mainTab.newToggle("Auto Block", "Blocks most incoming hits (Do not block while active)", false, function(state)
    State.toggleStates.autoBlock = state
    stopConnection("autoBlock")
    
    if state then
        State.connections.autoBlock = RunService.Heartbeat:Connect(function()
            spawn(function()
                if State.character then
                    wait()
                    ReplicatedStorage.RemoteEvents.ReplicateGuardOn:FireServer()
                    State.character.Guarding.Value = false
                    wait()
                    ReplicatedStorage.RemoteEvents.ReplicateGuardOff:FireServer()
                end
            end)
        end)
    end
end)

mainTab.newToggle("No Cooldown", "Removes some cooldowns (may not always work)", false, function(state)
    State.toggleStates.noCooldown = state
    if state then
        setupNoCooldown()
    end
end)

-- General Tab UI Elements
generalTab.newToggle("Hitbox Expander", "Increases other players' hitbox size", false, function(state)
    State.toggleStates.hitboxExpander = state
    stopConnection("hitboxUpdate")
    
    if state then
        updateHitboxes()
        State.connections.hitboxUpdate = RunService.Heartbeat:Connect(updateHitboxes)
    else
        resetHitboxes()
    end
end)
